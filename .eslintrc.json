{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "sourceType": "module",
    "project": "./tsconfig.json",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": [
    "next/core-web-vitals",
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "plugins": ["@typescript-eslint", "prettier"],
  "root": true,
  "rules": {
    // prettier
    "prettier/prettier": ["error"],

    // typescript
    "@typescript-eslint/no-unused-vars": ["error"],

    "padding-line-between-statements": [
      "error",
      // Always require blank lines after directive (like "use-strict"), except between directives
      { "blankLine": "always", "prev": "directive", "next": "*" },
      { "blankLine": "any", "prev": "directive", "next": "directive" },
      // Always require blank lines after import, except between imports
      { "blankLine": "always", "prev": "import", "next": "*" },
      { "blankLine": "any", "prev": "import", "next": "import" },
      // Always require blank lines before and after every sequence of variable declarations and export
      {
        "blankLine": "always",
        "prev": "*",
        "next": ["const", "let", "var", "export"]
      },
      {
        "blankLine": "always",
        "prev": ["const", "let", "var", "export"],
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": ["const", "let", "var", "export"],
        "next": ["const", "let", "var", "export"]
      },
      // Always require blank lines before and after class declaration, if, do/while, switch, try
      {
        "blankLine": "always",
        "prev": "*",
        "next": ["if", "class", "for", "do", "while", "switch", "try"]
      },
      {
        "blankLine": "always",
        "prev": ["if", "class", "for", "do", "while", "switch", "try"],
        "next": "*"
      },
      // Always require blank lines before return statements
      { "blankLine": "always", "prev": "*", "next": "return" }
    ]
  }
}
